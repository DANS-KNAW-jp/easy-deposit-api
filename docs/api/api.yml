openapi: 3.0.0
info:
  title: Deposit API
  version: 0.1.0
  description: |
    This document specifies the public interface for depositing a dataset in EASY
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: 'http://test.dans.knaw.nl'
    description: ""

tags:
- name: "default"
  description: "default"
- name: "user"
  description: "Operations about user"
- name: "deposit"
  description: "Operations on a deposit"
- name: "file"
  description: "Operations on a file"

schemes:
- "http"

paths:
  /:
    get:
      tags:
      - "default"
      summary: "Return description of the service"
      description:
        "This is the starting place for navigating the Depost Web UI. It returns a description of the service"
      responses:
        200:
          description: "description of the service"
          content:
            text/plain:
              schema:
                type: string
                description: a plain text, human readable description of the service
                example: |
                  ...
        500:
          description: "Service is unavailable because of an error"

  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      requestBody:
        description: "Created user object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/User"
            example:
              id: 3
              username: "John"
              password: "Jpass"
          application/xml:
            schema:
              $ref: "#/definitions/User"
            example:
              id: 3
              username: "John"
              password: "Jpass"
      responses:
        default:
          description: "successful operation"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"

  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"

  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      requestBody:
        description: "Update user"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/User"
          application/xml:
            schema:
              $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"

    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

  /deposits:
    get:
      tags:
      - "deposit"
      summary: "List all deposits"
      description: "Shows all deposit of a specific user"
      operationId: "getDeposits"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "List of all deposits retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Deposit"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposits/{id}/metadata:
    get:
      tags:
      - "deposit"
      summary: "Load deposit"
      description: "Get deposit specified by id only with DRAFT/REJECTED status"
      operationId: "getDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Deposit retrieved successfully if its state is DRAFT or REJECTED"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Metadata"
        500:
          description: "Deposit not retrieved because its state is something else than DRAFT or REJECTED"
      security:
      - api_key: []

  /deposits/{id}/state:
    get:
      tags:
      - "deposit"
      summary: "Get state of deposit"
      description: "Get state of deposit"
      operationId: "getDepositState"
      produces:
      - "application/json"
      - "application/xml"
    parameters:
    - name: "id"
      in: "path"
      description: "id of deposit to be retrieved"
      required: true
      type: "string"
      format: "uuid"
    responses:
      200:
        description: "Deposit retrieved successfully"
        schema:
          type: "string"
      400:
        description: "Invalid id supplied"

  /deposit:
    post:
      tags:
      - "deposit"
      summary: "Create an new deposit"
      description: "Creates an empty bag and retrieves deposit's id"
      operationId: "createDeposit"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        201:
          description: "Deposit created successfully"
          schema:
              $ref: "#/definitions/Deposit"

  /deposit/{id}/metadata:
    put:
      tags:
      - "deposit"
      summary: "Save draft of deposit"
      description: "Update metadata?"
      operationId: "saveDepositDraft"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of draft of deposit to be updated"
        required: true
        type: "string"
        format: "uuid"
      requestBody:
        description: "Save metadata that needs to be updated in deposit"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Metadata'
          application/xml:
            schema:
              $ref: '#/definitions/Metadata'
      responses:
        400:
          description: "Invalid id supplied"
        405:
          description: "Validation exception"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}/state:
    put:
      tags:
      - "deposit"
      summary: "Update state of deposit"
      description: "Submit"
      operationId: "updateDepositState"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit whose state to be updated"
        required: true
        type: "string"
        format: "uuid"
      requestBody:
        description: "Update state of deposit"
        required: true
        content:
          text/plain:
            state:
              type: string
              default: "SUBMITTED"
      responses:
        200:
          description: "Deposit updated successfully"
        400:
          description: "Invalid id supplied"
        405:
          description: "Validation exception"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/ApiResponse"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}:
    delete:
      tags:
      - "deposit"
      summary: "Delete deposit"
      description: "Delete a deposit specified by id"
      operationId: "deleteDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit to be deleted"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "Deposit deleted successfully"
        400:
          description: "Invalid id supplied"
        404:
          description: "Deposit not found"


  /deposits/{id}/files:
    get:
      tags:
      - "file"
      summary: "List all files of deposit"
      description: "Show all files of deposit"
      operationId: "getFilesOfDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "List of all files of deposit retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/File"
        400:
          description: "Invalid id supplied"
        404:
          description: "File not found"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}/file:
    post:
      tags:
      - "file"
      summary: "Upload a file"
      description: "Add a new file to deposit"
      operationId: "depositFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit where file is uploaded"
        required: true
        type: "string"
        format: "uuid"
      requestBody:
        description: "File upload"
        required: true
        content:
          application/octet-stream:
          # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        200:
          description: "file is deposited successfully"
          schema:
            $ref: "#/definitions/File"
        401:
          description: "You are not authorized to use this API. Please provide a valid user name and password before trying to use an API."
        500:
          description: "Internal Server Error"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}/{file_id}:
    put:
      tags:
      - "file"
      summary: "Update a file"
      description: "Updates file in deposit"
      operationId: "updateFile"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit to be updated"
        required: true
        type: "integer"
        format: "uuid"
      - name: "file_id"
        in: "path"
        description: "id of file to be updated in deposit"
        required: true
        type: "string"
        format: "uuid"
      requestBody:
        description: "File update"
        required: true
        content:
          application/octet-stream:
          # any media type is accepted, functionally equivalent to `*/*`
            schema:
              # a binary file of any type
              type: string
              format: binary
      responses:
        200:
          description: "file is updated successfully"
          schema:
            $ref: "#/definitions/File"
        400:
          description: "Invalid id supplied"
        404:
          description: "File not found"
        405:
          description: "Validation exception"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

    delete:
      tags:
      - "file"
      summary: "Delete a file from deposit"
      description: "Deletes a deposit specified by ID"
      operationId: "deleteFileFromDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "path"
        description: "id of deposit"
        required: true
        type: "string"
        format: "uuid"
      - name: "file_id"
        in: "path"
        description: "id of file to be deleted from deposit"
        required: true
        type: "string"
        format: "uuid"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "File not found"


securityDefinitions:
  deposit_auth:
    type: "oauth2"
    authorizationUrl: "http://test.dans.knaw.nl/oauth/dialog"
    flow: "implicit"
    scopes:
      write:deposits: "modify deposits in your account"
      read:deposits: "read your deposits"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

  User:
    type: "object"
    required:
    - "id"
    - "username"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"

  Deposit:
    type: "object"
    required:
    - "id"
    - "title"
    properties:
      id:
        type: "string"
        format: "uuid"
      title:
        type: "string"
      status:
        type: "string"
      status_description:
        type: "string"
      date:
        type: "string"
        format: "date-time"
        description: "Deposit date of ..."
# TODO : do we need the array of files here?
#      deposit_files:
#        type: "array"
#        xml:
#          name: "deposit_files"
#          wrapped: true
#        items:
#          $ref: "#/definitions/File"
    xml:
      name: "Deposit"

  File:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      status:
        type: "string"
      checksum:
        type: "string"
        description: "checksum got with MD5?"
    xml:
      name: "File"

  SchemeAndID:
    type: "object"
    properties:
      scheme:
        type: "string"
        description: "Scheme ..."
        enum:
        - "Scheme 1"
        - "Scheme 2"
        - "Scheme 3"
      id:
        type: "integer"
        format: "int64"
    xml:
      name: "SchemeAndID"

  Creator:
    type: "object"
    required:
    - "initials"
    - "surname"
    properties:
      schemeAndID:
        type: "array"
        xml:
          name: "schemeAndID"
          wrapped: true
        items:
          $ref: "#/definitions/SchemeAndID"
      academicTitles:
        type: "string"
      initials:
        type: "string"
      prefix:
        type: "string"
      surname:
        type: "string"
      role:
        type: "string"
        description: "Role ..."
        enum:
        - "Role 1"
        - "Role 2"
        - "Role 3"
      organization:
        type: "string"
    xml:
      name: "Creator"

  Contributor:
    type: "object"
    required:
    - "initials"
    - "surname"
    properties:
      schemeAndID:
        type: "array"
        xml:
          name: "schemeAndID"
          wrapped: true
        items:
          $ref: "#/definitions/SchemeAndID"
      academicTitles:
        type: "string"
      initials:
        type: "string"
      prefix:
        type: "string"
      surname:
        type: "string"
      role:
        type: "string"
        description: "Role ..."
        enum:
        - "Role 1"
        - "Role 2"
        - "Role 3"
      organization:
        type: "string"
    xml:
      name: "Contributor"

  Relation:
    type: "object"
    properties:
      qualifier:
        type: "string"
        description: "Qualifier ..."
        enum:
        - "Qualifier 1"
        - "Qualifier 2"
        - "Qualifier 3"
      title:
        type: "string"
      url:
        type: "string"
      emphasize_this_relation:
        type: "boolean"
        default: true
    xml:
      name: "Relation"

  LanguageISO639:
    type: "object"
    properties:
      language:
        type: "string"
        description: "Language ..."
        enum:
        - "Language 1"
        - "Language 2"
        - "Language 3"
    xml:
      name: "LanguageISO639"

  SchemeAndDate:
    type: "object"
    properties:
      scheme:
        type: "string"
        description: "Scheme ..."
        enum:
        - "Scheme 1"
        - "Scheme 2"
        - "Scheme 3"
      date:
        type: "string"
    xml:
      name: "SchemeAndDate"

  License:
    type: "object"
    required:
    - "accessRightsOpenAccess"
    - "accessRightsRegisteredUsers"
    - "accessRightsRestrictedGroup"
    - "accessRightsRestrictedReqPermission"
    - "accessRightsOtherAccess"
    - "licence"
    properties:
      rightsHolder:
        type: "array"
        xml:
          name: "rightsHolder"
          wrapped: true
        items:
          type: "string"
      publisher:
        type: "array"
        xml:
          name: "publisher"
          wrapped: true
        items:
          type: "string"
      accessRightsOpenAccess:
        type: "boolean"
        default: true
      accessRightsRegisteredUsers:
        type: "boolean"
        default: false
      accessRightsRestrictedGroup:
        type: "boolean"
        default: false
      selectRestrictedGroup:
        type: "string"
        description: "Select Restricted Group ..."
        enum:
        - "Restricted Group 1"
        - "Restricted Group 2"
        - "Restricted Group 3"
      accessRightsRestrictedReqPermission:
        type: "boolean"
        default: false
      accessRightsOtherAccess:
        type: "boolean"
        default: false
      license:
        type: "string"
        description: "License ..."
        enum:
        - "License 1"
        - "License 2"
        - "License 3"
      dateAvailable:
        type: "string"
        format: "date-time"
    xml:
      name: "License"

  TypeDCMI:
    type: "object"
    properties:
      typeDCMI:
        type: "string"
        description: "Type (DCMI resource type)"
        enum:
        - "Type 1"
        - "Type 2"
        - "Type 3"
    xml:
      name: "TypeDCMI"

  FormatIMT:
    type: "object"
    properties:
      formatIMT:
        type: "string"
        description: "Format (internet media type)"
        enum:
        - "Format 1"
        - "Format 2"
        - "Format 3"
    xml:
      name: "FormatIMT"

  UploadType:
    type: "object"
    properties:
      typeDCMI:
        type: "array"
        xml:
          name: "typeDCMI"
          wrapped: true
        items:
          $ref: "#/definitions/TypeDCMI"
      type:
        type: "array"
        xml:
          name: "type"
          wrapped: true
        items:
          type: "string"
      formatIMT:
        type: "array"
        xml:
          name: "formatIMT"
          wrapped: true
        items:
          $ref: "#/definitions/FormatIMT"
      uploadFormat:
        type: "array"
        xml:
          name: "format"
          wrapped: true
        items:
          type: "string"
    xml:
      name: "UploadType"


  ArchisZaakidentificatie:
    type: "object"
    properties:
      pakbon:
        type: "array"
        xml:
          name: "archisZaakidentificatie"
          wrapped: true
        items:
          type: "string"
    xml:
      name: "ArchisZaakidentificatie"

  SubjectABRcomplex:
    type: "object"
    properties:
      subjectABRcomplex:
        type: "string"
        description: "Subject ABR complex"
        enum:
        - "SubjectABR 1"
        - "SubjectABR 2"
        - "SubjectABR 3"
    xml:
      name: "SubjectABRcomplex"

  TemporalCoverage:
    type: "object"
    properties:
      temporalCoverage:
        type: "string"
        description: "Temporal coverage (ABR period)"
        enum:
        - "TemporalCoverage 1"
        - "TemporalCoverage 2"
        - "TemporalCoverage 3"
    xml:
      name: "TemporalCoverage"

  ArchaeologyMetadata:
    type: "object"
    properties:
# TODO to elaborate on importPakbon if it will be decided that this functionality is needed
# How to describe with Swagger the "Upload" button?
#      importPakbon:
#        type: "string"
      archisZaakidentificatie:
        type: "array"
        xml:
          name: "archisZaakidentificatie"
          wrapped: true
        items:
          $ref: "#/definitions/ArchisZaakidentificatie"
      subjectABRcomplex:
        type: "array"
        xml:
          name: "subjectABRcomplex"
          wrapped: true
        items:
          $ref: "#/definitions/SubjectABRcomplex"
      temporalCoverage:
        type: "array"
        xml:
          name: "temporalCoverage"
          wrapped: true
        items:
          $ref: "#/definitions/TemporalCoverage"
    xml:
      name: "ArchaeologyMetadata"

  LanguageAndLiteratureMetadata:
    type: "object"
    properties:
      absentCLARINmetadata:
        type: "boolean"
        default: true
      presentCLARINmetadata:
        type: "boolean"
        default: false
    xml:
      name: "LanguageAndLiteratureMetadata"

  SpatialPoint:
    type: "object"
    properties:
      schemeSpatialPoint:
        type: "array"
        items:
          type: "string"
          enum:
          - "Scheme Spatial Point 1"
          - "Scheme Spatial Point 2"
          - "Scheme Spatial Point 3"
      xCoordinate:
        type: "string"
      yCoordinate:
        type: "string"
    xml:
      name: "SpatialPoint"

  SpatialBox:
    type: "object"
    properties:
      schemeSpatialBox:
        type: "array"
        items:
          type: "string"
          enum:
          - "Scheme Spatial Box 1"
          - "Scheme Spatial Box 2"
          - "Scheme Spatial Box 3"
      north:
        type: "string"
      east:
        type: "string"
      south:
        type: "string"
      west:
        type: "string"
    xml:
      name: "SpatialBox"

  TimeAndSpacialMetadata:
    type: "object"
    properties:
      temporalCoverage:
        type: "array"
        xml:
          name: "temporalCoverage"
          wrapped: true
        items:
          type: "string"
      spatialPoint:
        type: "array"
        xml:
          name: "relation"
          wrapped: true
        items:
          $ref: "#/definitions/SpatialPoint"
      spatialBox:
        type: "array"
        xml:
          name: "relation"
          wrapped: true
        items:
          $ref: "#/definitions/SpatialBox"
      spatialCoverage:
        type: "array"
        xml:
          name: "spatialCoverage"
          wrapped: true
        items:
          type: "string"
    xml:
      name: "TimeAndSpacialMetadata"

  Metadata:
    type: "object"
    required:
    - "id"
    - "title"
    - "creator"
    - "dateCreated"
    - "audience"
    - "privacySensitiveDataYes"
    - "privacySensitiveDataNo"
    - "license"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "array"
        xml:
          name: "title"
          wrapped: true
        items:
          type: "string"
      alternativeTitle:
        type: "array"
        xml:
          name: "alternativeTitle"
          wrapped: true
        items:
          type: "string"
      description:
        type: "string"
      creator:
        type: "array"
        xml:
          name: "creator"
          wrapped: true
        items:
          $ref: "#/definitions/Creator"
      contributor:
        type: "array"
        xml:
          name: "contributor"
          wrapped: true
        items:
          $ref: "#/definitions/Contributor"
      dateCreated:
        type: "string"
        format: "date-time"
      audience:
        type: "array"
        xml:
          name: "audience"
          wrapped: true
        items:
          type: "string"
      subject:
        type: "array"
        xml:
          name: "subject"
          wrapped: true
        items:
          type: "string"
      identifier:
        type: "array"
        xml:
          name: "identifier"
          wrapped: true
        items:
          $ref: "#/definitions/SchemeAndID"
# TODO how to take "Verify" button into account?
      relation:
        type: "array"
        xml:
          name: "relation"
          wrapped: true
        items:
          $ref: "#/definitions/Relation"
      languageISO639:
        type: "array"
        xml:
          name: "language"
          wrapped: true
        items:
          $ref: "#/definitions/LanguageISO639"
      language:
        type: "array"
        xml:
          name: "language"
          wrapped: true
        items:
          type: "string"
      dateISO8601:
        type: "array"
        xml:
          name: "dateISO8601"
          wrapped: true
        items:
          $ref: "#/definitions/SchemeAndDate"
      date:
        type: "array"
        xml:
          name: "date"
          wrapped: true
        items:
          $ref: "#/definitions/SchemeAndDate"
      source:
        type: "string"
      remarks:
        type: "string"
      privacySensitiveDataYes:
        type: "boolean"
        default: false
      privacySensitiveDataNo:
        type: "boolean"
        default: false
      license:
        $ref: "#/definitions/License"
      uploadType:
        $ref: "#/definitions/UploadType"
      archaeologyMetadata:
        $ref: "#/definitions/ArchaeologyMetadata"
      languageAndLiteratureMetadata:
        $ref: "#/definitions/LanguageAndLiteratureMetadata"
      timeAndSpacialMetadata:
        $ref: "#/definitions/TimeAndSpacialMetadata"
      licenseAgreement:
        type: "boolean"
        default: false
    xml:
      name: "Metadata"
