openapi: 3.0.0
info:
  title: Deposit UI API
  version: 0.1.0
  description: |
    This document specifies
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: 'http://test.dans.knaw.nl'
    description: ""

tags:
- name: "default"
  description: "default"
- name: "user"
  description: "Operations about user"
- name: "deposit"
  description: "Operations on a deposit"
- name: "file"
  description: "Operations on a file"

schemes:
- "http"

paths:
  /:
    get:
      tags:
      - "default"
      summary: "Return description of the service"
      description:
        "This is the starting place for navigating the Depost Web UI. It returns a description of the service"
      responses:
        200:
          description: "description of the service"
          content:
            text/plain:
              schema:
                type: string
                description: a plain text, human readable description of the service
                example: |
                  ...
        500:
          description: "Service is unavailable because of an error"

  /user/login:
    post:
      tags:
      - "user"
      summary: "Log user in"
      description: "This is a service for user authentication"
      operationId: "loginUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "The login credentials"
        schema:
          $ref: "#/definitions/Login"
      responces:
        200:
          description: "Login was successful"
          schema:
            $ref: "#/definitions/User"
          headers:
            Set-Cookie:
              type: "string"
              description: "The session cookie"
              default: "demo-session-id=123456789012345678901234567890"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"

  /user/{username}/logout:
    post:
      tags:
      - "user"
      summary: "Log user out"
      description: ""
      operationId: "logoutUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - *username
        - *sessionCookie
      responses:
        204:
          description: "Logout was successful"
          headers:
            Set-Cookie:
              type: "string"
              description: "Deletes the session cookie (by making expire in the past)"
              default: "demo-session-id=deleted; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/"
        401:
          description: "You tried to log someone else out, and you're not the admin user."
        404:
          description: The {username} was not found

  /deposits:
    get:
      tags:
      - "deposit"
      summary: "List all deposits"
      description: "Shows all deposits"
      operationId: "getDeposits"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "List of all deposits retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Deposit"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposits/{id}/metadata:
    get:
      tags:
      - "deposit"
      summary: "Load deposit"
      description: "Get deposit specified by id only with DRAFT/REJECTED status"
      operationId: "getDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit"
        required: true
        type: "integer"
        format: "int64"
#      - name: "metadata"
#        in: "path"
#        description: "metadata"
#        required: true
#        type: "string"
      - name: "metadata"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "DRAFT"
          - "REJECTED"
      responses:
        200:
          description: "Deposit retrieved successfully"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Deposit"
      security:
      - api_key: []

  /deposits/{id}/state:
    get:
      tags:
      - "deposit"
    summary: "Get deposit with state"
    description: "Get deposit state ..."
    operationId: "getDepositState"
    produces:
    - "application/json"
    - "application/xml"
    parameters:
    - name: "id"
      in: "path"
      description: "id of deposit to be retrieved"
      required: true
      type: "integer"
      format: "int64"
    - name: "state"
      in: "path"
      type: "string"
      description: "state of deposit"
      required: true
    responses:
      200:
        description: "Deposit retrieved successfully"
        schema:
          type: "object"
          items:
            $ref: "#/definitions/Deposit"
      400:
        description: "Invalid id supplied"
      405:
        description: "Validation exception"


  /deposit:
    post:
      tags:
      - "deposit"
      summary: "Create deposit"
      description: "Creates a new deposit"
      operationId: "createDeposit"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created deposit object"
        required: true
        schema:
          $ref: "#/definitions/Deposit"
      responces:
        201:
          description: "Deposit created successfully"
        schema:
          type: "object"
          items:
            $ref: "#/definitions/Deposit"


  /deposit/{id}/metadata:
    put:
      tags:
      - "deposit"
      summary: "Save draft of deposit"
      description: "Update metadata?"
      operationId: "saveDepositDraft"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of draft of deposit to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "metadata"
        in: "path" #"body" ?
        type: "string"
        description: "Metadata that needs to be updated in deposit"
        required: true
      responses:
        400:
          description: "Invalid id supplied"
        405:
          description: "Validation exception"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}/state:
    put:
      tags:
      - "deposit"
      summary: "Submit deposit"
      description: "Submit"
      operationId: "sabmitDeposit"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit to be submitted"
        required: true
        type: "integer"
        format: "int64"
      - name: "state"
        in: "path"
        type: "string"
        description: "state that needs to be saved in deposit"
        required: true
      responses:
      200:
        description: "Deposit updated successfully"
        schema:
          type: "object"
          items:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid id supplied"
        405:
          description: "Validation exception"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}:
    delete:
      tags:
      - "deposit"
      summary: "Delete deposit"
      description: "Delete a deposit specified by id"
      operationId: "deleteDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Deposit not found"


  /deposits/{id}/files:
    get:
      tags:
      - "file"
      summary: "List all files of deposit"
      description: "Show all files of deposit"
      operationId: "getFilesOfDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of all files of deposit retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/File"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}/file:
    post:
      tags:
      - "file"
      summary: "Upload a file"
      description: "Add a new file to deposit"
      operationId: "depositFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit where file is uploaded"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        requestBody:
          content:
            application/octet-stream:
            # any media type is accepted, functionally equivalent to `*/*`
              schema:
                # a binary file of any type
                type: string
                format: binary
      responses:
        200:
          description: "file is deposited successfully"
          schema:
            $ref: "#/definitions/File"
        400:
          description: "Invalid input"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

  /deposit/{id}/{file_id}:
    put:
      tags:
      - "file"
      summary: "Update a file"
      description: "Updates file in deposit"
      operationId: "updateFile"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of deposit to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "file_id"
        in: "path"
        description: "id of file to be updated in deposit"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "File object that needs to be updated in deposit"
        required: true
        schema:
          $ref: "#/definitions/File"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "File not found"
        405:
          description: "Validation exception"
      security:
      - deposit_auth:
        - "write:deposits"
        - "read:deposits"

    delete:
      tags:
      - "file"
      summary: "Delete a file from deposit"
      description: "Deletes a deposit specified by ID"
      operationId: "deleteFileFromDeposit"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "path"
        description: "id of deposit"
        required: true
        type: "integer"
        format: "int64"
      - name: "file_id"
        in: "path"
        description: "id of file to be deleted from deposit"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Deposit not found"


securityDefinitions:
  deposit_auth:
    type: "oauth2"
    authorizationUrl: "http://test.dans.knaw.nl/oauth/dialog"
    flow: "implicit"
    scopes:
      write:deposits: "modify deposits in your account"
      read:deposits: "read your deposits"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

  # A simple username/password combo for logging in
  Login:
    required: [username, password]
    properties:
      username:
        type: string
        minLength: 5
      password:
        type: string
        minLength: 5

  sessionCookie: &sessionCookie
    name: Cookie
    in: header
    required: true
    type: string
    description: The session cookie

  username: &username
    name: username
    in: path
    required: true
    type: string
  description: This is the {username} path parameter

  User:
    type: "object"
    required:
    - "id"
    - "username"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"

  Deposit:
    type: "object"
    required:
    - "id"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      status:
        type: "string"
      status_description:
        type: "string"
      date:
        type: "string"
        format: "date-time"
        description: "Deposit date of ..."
      deposit_files:
        type: "array"
        xml:
          name: "deposit_files"
          wrapped: true
        items:
          type: "File"
    xml:
      name: "Deposit"

  File:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      status:
        type: "string"
      date:
        type: "string"
        format: "date-time"
        description: "Deposit date of ..."
    xml:
      name: "File"
